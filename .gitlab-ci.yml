# Copyright (C) 2023  Christian Berger
#
# Copyright (C) 2023  Robert Einer, Emma Litvin, Ossian Ã…lund, Bao Quan Lindgren, Khaled Adel Saleh Mohammed Al-Baadani
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Which Docker image shall be used on the GitLab runner?
image: docker:20.10.14

# Details about how to connect to the Docker service to run this build.
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  DOCKER_CLI_EXPERIMENTAL: enabled
  BUILDX_URL: https://github.com/docker/buildx/releases/download/v0.7.1/buildx-v0.7.1.linux-amd64
  BUILDX_PLATFORM: linux/amd64,linux/arm/v7

services:
 - name: docker:20.10.14-dind

stages:
  - build
#  - generate-coverage
  - prepare_deploy
  - deploy

# This section describes what shall be done to build and test the project.
build:
  tags:
    - docker-build
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  script:
    - docker info
    - docker build -t cone-detector -f cone-detector.dockerfile .
    - docker build -t angle-calculator -f angle-calculator.dockerfile .

# code-coverage:
#  image: ubuntu:18.04
#  stage: generate-coverage
#  tags:
#    - docker-build
#  script:
#    - cd example
#    - apt-get update -y && apt-get upgrade -y && apt-get dist-upgrade -y
#    - apt-get install -y cmake && apt-get install -y build-essential && apt-get -y install lcov && apt-get install -y gcovr
#    - mkdir build && cd build
#    - cmake .. && make && make test
    # Run helloworld so that it gets included in the coverage
#    - ./helloworld
    # Capture the coverage and put it in a file called coverage.info and store it in the current directory
#    - lcov --capture --directory . --output-file coverage.info
    # Remove some files that shouldn't be included in the coverage statistics.  
#    - lcov --remove coverage.info '/usr/*' '*.hpp' --output-file coverage.info
    # Output the coverage in the pipeline
#    - lcov --list coverage.info
    # Generate html files using the information stored in coverage.info, and save them in a directory called coverage_result
#    - genhtml coverage.info --output-directory coverage_result
    # Generate xml coverage report to be able to make artifacts
#    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}/example
  # Show code coverage in UI of the pipeline according to the regex 
#  coverage: /^\s*lines:\s*\d+.\d+\%/
  # Artifacts to be extracted form coverage data
#  artifacts:
#    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
#    expire_in: 50 days
#    # Here we specify what should be included in the artifact
#    paths:
#      - ${CI_PROJECT_DIR}/example/build/coverage_result
    # The report to be generated
#    reports:
#      coverage_report:
#        coverage_format: cobertura
#        path: ${CI_PROJECT_DIR}/example/build/coverage.xml

# This section prepares an artifact for deployment
prepare_deploy:
  stage: prepare_deploy
  tags:
    - docker-build
  script:
    - apk add --update zip
    - zip -r deploy.zip deploy/
    - echo "ARTIFACT_ID=$CI_JOB_ID" >> job.env
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
  artifacts:
    paths:
      - deploy.zip
    expire_in: never
    reports:
      dotenv: job.env

# This section describes what shall be done to deploy artifacts from the project.
release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prepare_deploy
      artifacts: true
  tags:
    - docker-build
  script:
    - apk add --update docker zip
    - mkdir -p $HOME/.docker/cli-plugins/
    - wget -O $HOME/.docker/cli-plugins/docker-buildx $BUILDX_URL
    - chmod a+x $HOME/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
    - docker buildx inspect --bootstrap
    - docker buildx ls
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker buildx build --platform=${BUILDX_PLATFORM} -t "$CI_REGISTRY_IMAGE/cone-detector":"$CI_COMMIT_TAG" -f cone-detector.dockerfile --push .
    - docker buildx build --platform=${BUILDX_PLATFORM} -t "$CI_REGISTRY_IMAGE/angle-calculator":"$CI_COMMIT_TAG" -f angle-calculator.dockerfile --push .
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
  release:
    tag_name: "$CI_COMMIT_TAG"
    description: "AnglePilot:$CI_COMMIT_TAG"
    assets:
      links:
        - name: deploy.zip
          link: https://git.chalmers.se/courses/dit638/students/2023-group-13/-/jobs/$ARTIFACT_ID/artifacts/download