# Copyright (C) 2023  Christian Berger
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Which Docker image shall be used on the GitLab runner?
image: docker:19.03.3

# Details about how to connect to the Docker service to run this build.
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

services:
 - name: docker:19.03.3-dind

stages:
  - build
  - generate-coverage
  - deploy

# Display information before we start the build.
#before_script:
 # - docker info
  #- docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# This section describes what shall be done to build and test the project.
# comment
build-and-test:
  tags:
    - docker-build 
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always  
  script:
    - docker info
   # - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd example
    - docker build -f Dockerfile .

code-coverage:
  image: ubuntu:18.04
  stage: generate-coverage
  tags:
    - docker-build
  script:
    - cd example
    - apt-get update -y && apt-get upgrade -y && apt-get dist-upgrade -y
    - apt-get install -y cmake && apt-get install -y build-essential && apt-get -y install lcov && apt-get install -y gcovr
    - mkdir build && cd build
    - cmake .. && make && make test
    # Run helloworld so that it gets included in the coverage
    - ./helloworld
    # Capture the coverage and put it in a file called coverage.info and store it in the current directory
    - lcov --capture --directory . --output-file coverage.info
    # Remove some files that shouldn't be included in the coverage statistics.  
    - lcov --remove coverage.info '/usr/*' '*.hpp' --output-file coverage.info
    # Output the coverage in the pipeline
    - lcov --list coverage.info
    # Generate html files using the information stored in coverage.info, and save them in a directory called coverage_result
    - genhtml coverage.info --output-directory coverage_result
    # Generate xml coverage report to be able to make artifacts
    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}/example
  # Show code coverage in UI of the pipeline according to the regex 
  coverage: /^\s*lines:\s*\d+.\d+\%/
  # Artifacts to be extracted form coverage data
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 50 days
    # Here we specify what should be included in the artifact
    paths:
      - ${CI_PROJECT_DIR}/example/build/coverage_result
    # the report to be generated
    reports:
      coverage_report:
        coverage_format: cobertura
        path: ${CI_PROJECT_DIR}/example/build/coverage.xml


# This section describes what shall be done to deploy artefacts from the project.
release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - docker-build
  script:
    - echo "Installing Docker"
    - apk add --update docker
    - echo "before login"
    - cd example
    - echo "'$CI_REGISTRY_IMAGE'"
    - echo "'$CI_COMMIT_TAG'"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f Dockerfile -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" .
    - docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG"
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
  release:
    tag_name: "$CI_COMMIT_TAG"
    description: "Current release"  

